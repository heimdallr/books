cmake_minimum_required(VERSION 3.12)
project(books)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(PLATFORM "x64")
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(PLATFORM "x86")
endif()

add_compile_options(
	/std:c++latest
	/wd4250 # inherits via dominance
	/wd4503	# decorated name length exceeded, name was truncated
	/wd4566 # Ошибка в ассертах с русскими сиволами assert(true && "Превед") - character represented by universal-character-name
	/wd4710 # function not inlined
	/wd4711 # function selected for automatic inline expansion
	/wd4820 # bytes padding added after data member
	/wd5045 # compiler will insert Spectre mitigation for memory load if /Qspectre switch specified
	/we5038 # reorder
	/MP
)
add_definitions(
	-DNOMINMAX
	-D_UNICODE
	-DUNICODE
	-D_CRT_SECURE_NO_WARNINGS
	-D_SCL_SECURE_NO_WARNINGS
	-D_USE_MATH_DEFINES
	-D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING
	${WINVER}
)

set(SCRIPTS_PATH "src/ext/scripts")
include("${SCRIPTS_PATH}/cmake/initialize.cmake")
include("${SCRIPTS_PATH}/cmake/thirdparty/boost.cmake")
include("${SCRIPTS_PATH}/cmake/thirdparty/Hypodermic.cmake")
include("${SCRIPTS_PATH}/cmake/thirdparty/plog.cmake")
include("${SCRIPTS_PATH}/cmake/thirdparty/zlib.cmake")
include("${SCRIPTS_PATH}/cmake/thirdparty/qt.cmake")
find_package(Qt6 REQUIRED COMPONENTS Widgets)

include("${SCRIPTS_PATH}/cmake/thirdparty/quazip.cmake")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(WARN_DISABLE_DEPRECATED	ON)
set(BIN_DIR ${CMAKE_CURRENT_BINARY_DIR}/bin)

#include("${SCRIPTS_PATH}/cmake/thirdparty/ThirdpartyModule.cmake")

include("${SCRIPTS_PATH}/cmake/target.cmake")
include("${SCRIPTS_PATH}/cmake/GenerateSettingsClass.cmake")
include("${SCRIPTS_PATH}/cmake/GenerateTranslations.cmake")

set(ORGANIZATION_NAME "HomeCompa")
set(PRODUCT_NAME "Flibrary")
set(PRODUCT_NAME_ABOUT "Flibrary")
set(PRODUCT_NAME_FILE_DESCRIPTION "Flibrary: e-library cataloger")
set(PRODUCT_VERSION_MAJOR "0")
set(PRODUCT_VERSION_MINOR "5.0")
set(PRODUCT_NAME_VERSIONED "${PRODUCT_NAME} ${PRODUCT_VERSION_MAJOR}.${PRODUCT_VERSION_MINOR}")
if(WIN32)
	CheckRequiredVariables(PRODUCT_VERSION_MINOR)
	string(REPLACE "." "," PRODUCT_VERSION_MINOR_COMMA ${PRODUCT_VERSION_MINOR})
endif()


include("src/ext/sqlite.cmake")
include("src/ext/MyHomeLib.cmake")
include("src/ext/fmt.cmake")

include("src/home/home.cmake")

include("src/home/flibrary_old/src/flibrary.cmake")

#include("${SCRIPTS_PATH}/cmake/PrepareWorkspace.cmake")
