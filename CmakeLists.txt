cmake_minimum_required(VERSION 3.12)
project(FLibrary VERSION ${PRODUCT_VERSION})

set(CMAKE_CXX_STANDARD 23)

add_compile_options(
	/MP     # multi-processor compilation
	/W4		# warnings level 4
	/WX		# warning is error
	/we5038 # reorder
	/wd4250 # inherits via dominance
	/wd4251 # member (ala std::unique_ptr<some>) needs to have dll-interface to be used by clients of class 'some'
	/wd4275 # non dll-interface class 'ISome' used as base for dll-interface class 'Some'
	/wd4503	# decorated name length exceeded, name was truncated
	/bigobj # number of sections exceeded object file format limit
)

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if (NOT DEFINED CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Debug)
endif ()

set(QT_MAJOR_VERSION 6)

# Подключаем сборочные скрипты
set(BUILDSCRIPTS_ROOT ${CMAKE_SOURCE_DIR}/src/ext/scripts)
set(CMAKE_MODULE_PATH ${BUILDSCRIPTS_ROOT}/cmake/modules)
include(${BUILDSCRIPTS_ROOT}/cmake/target.cmake)
include(${BUILDSCRIPTS_ROOT}/cmake/GenerateTranslations.cmake)

find_package(plog REQUIRED)
find_package(Boost REQUIRED)
find_package(XercesC REQUIRED)
find_package(7zip REQUIRED)
find_package(ICU REQUIRED)
find_package(libjxl REQUIRED)

string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UPPER)
file(WRITE "${CMAKE_BINARY_DIR}/path/7z" "${7zip_BIN_DIRS_${CMAKE_BUILD_TYPE_UPPER}}/")

set(QtModules Widgets Xml Network Svg SvgWidgets Concurrent HttpServer)
find_package(Qt6 REQUIRED COMPONENTS ${QtModules})
include(QtInstallPaths)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

add_compile_definitions(PLOG_IMPORT)
add_compile_definitions(UNICODE _UNICODE NOMINMAX _USE_MATH_DEFINES)
add_compile_definitions(HYPODERMIC_OVERRIDE_CONSTRUCTOR_ARGUMENT_COUNT=32)
include_directories("src/ext/Hypodermic")

include("src/ext/sqlite.cmake")
include("src/ext/MyHomeLib.cmake")

include("src/home/home.cmake")

set(CPACK_GENERATOR WIX)
set(CPACK_PACKAGE_NAME ${PROJECT_NAME})
set(CPACK_PACKAGE_VENDOR "Heimdallr HomeCompa")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME}: another e-book cataloger")
set(CPACK_PACKAGE_VERSION "${PRODUCT_VERSION}")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_LIST_DIR}/LICENSE_en.txt")
set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/heimdallr/books")
set(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_LIST_DIR}/src/home/flibrary/app/resources/icons/main.ico")
set(CPACK_MONOLITHIC_INSTALL TRUE)
set(CPACK_PACKAGE_EXECUTABLES "FLibrary;FLibrary")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "FLibrary")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}_setup_${CMAKE_PROJECT_VERSION}")

set(CPACK_WIX_PRODUCT_GUID ${PRODUCT_UID})
set(CPACK_WIX_UPGRADE_GUID "c39e21ad-9c07-4af6-a36a-bc65ae265075")
set(CPACK_WIX_PRODUCT_ICON "${CMAKE_CURRENT_LIST_DIR}/src/home/resources/icons/main.ico")
set(CPACK_WIX_CULTURES "en-US,ru-RU")
set(CPACK_WIX_PROPERTY_ARPURLINFOABOUT "https://github.com/heimdallr/books")
set(CPACK_WIX_UI_REF WixUI_FeatureTree)

INCLUDE(CPack)

if (PERSONAL_BUILD_NAME)
	message(WARNING "Personal ${PERSONAL_BUILD_NAME} build")
	execute_process(COMMAND ${CMAKE_COMMAND} -E sleep 5)
endif()
